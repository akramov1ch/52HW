// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: proto/sales.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SalesService_StreamSalesTransactions_FullMethodName = "/SalesService/StreamSalesTransactions"
)

// SalesServiceClient is the client API for SalesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesServiceClient interface {
	StreamSalesTransactions(ctx context.Context, opts ...grpc.CallOption) (SalesService_StreamSalesTransactionsClient, error)
}

type salesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesServiceClient(cc grpc.ClientConnInterface) SalesServiceClient {
	return &salesServiceClient{cc}
}

func (c *salesServiceClient) StreamSalesTransactions(ctx context.Context, opts ...grpc.CallOption) (SalesService_StreamSalesTransactionsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SalesService_ServiceDesc.Streams[0], SalesService_StreamSalesTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &salesServiceStreamSalesTransactionsClient{ClientStream: stream}
	return x, nil
}

type SalesService_StreamSalesTransactionsClient interface {
	Send(*SalesTransaction) error
	CloseAndRecv() (*SalesSummary, error)
	grpc.ClientStream
}

type salesServiceStreamSalesTransactionsClient struct {
	grpc.ClientStream
}

func (x *salesServiceStreamSalesTransactionsClient) Send(m *SalesTransaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *salesServiceStreamSalesTransactionsClient) CloseAndRecv() (*SalesSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SalesSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SalesServiceServer is the server API for SalesService service.
// All implementations must embed UnimplementedSalesServiceServer
// for forward compatibility
type SalesServiceServer interface {
	StreamSalesTransactions(SalesService_StreamSalesTransactionsServer) error
	mustEmbedUnimplementedSalesServiceServer()
}

// UnimplementedSalesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalesServiceServer struct {
}

func (UnimplementedSalesServiceServer) StreamSalesTransactions(SalesService_StreamSalesTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSalesTransactions not implemented")
}
func (UnimplementedSalesServiceServer) mustEmbedUnimplementedSalesServiceServer() {}

// UnsafeSalesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesServiceServer will
// result in compilation errors.
type UnsafeSalesServiceServer interface {
	mustEmbedUnimplementedSalesServiceServer()
}

func RegisterSalesServiceServer(s grpc.ServiceRegistrar, srv SalesServiceServer) {
	s.RegisterService(&SalesService_ServiceDesc, srv)
}

func _SalesService_StreamSalesTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SalesServiceServer).StreamSalesTransactions(&salesServiceStreamSalesTransactionsServer{ServerStream: stream})
}

type SalesService_StreamSalesTransactionsServer interface {
	SendAndClose(*SalesSummary) error
	Recv() (*SalesTransaction, error)
	grpc.ServerStream
}

type salesServiceStreamSalesTransactionsServer struct {
	grpc.ServerStream
}

func (x *salesServiceStreamSalesTransactionsServer) SendAndClose(m *SalesSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *salesServiceStreamSalesTransactionsServer) Recv() (*SalesTransaction, error) {
	m := new(SalesTransaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SalesService_ServiceDesc is the grpc.ServiceDesc for SalesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SalesService",
	HandlerType: (*SalesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSalesTransactions",
			Handler:       _SalesService_StreamSalesTransactions_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sales.proto",
}
